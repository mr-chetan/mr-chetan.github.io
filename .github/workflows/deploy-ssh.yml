name: Deploy to Server via SSH

on:
    # Runs on pushes targeting the main branch
    push:
        branches: ['main']
        paths-ignore:
            - 'README.md'
            - '.github/workflows/deploy.yml'
            - 'docs/**'

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Allow only one concurrent deployment
concurrency:
    group: 'ssh-deploy'
    cancel-in-progress: false

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Create deployment archive
              run: |
                  cd dist
                  tar -czf ../website.tar.gz .
                  cd ..

            - name: Deploy to server via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT || 22 }}
                  script: |
                      # Create backup of current deployment
                      if [ -d "${{ secrets.DEPLOY_PATH }}" ]; then
                        cp -r ${{ secrets.DEPLOY_PATH }} ${{ secrets.DEPLOY_PATH }}_backup_$(date +%Y%m%d_%H%M%S)
                        # Keep only last 3 backups
                        cd $(dirname ${{ secrets.DEPLOY_PATH }})
                        ls -t | grep "_backup_" | tail -n +4 | xargs rm -rf
                      fi

                      # Create deployment directory if it doesn't exist
                      mkdir -p ${{ secrets.DEPLOY_PATH }}

                      # Clear current deployment
                      rm -rf ${{ secrets.DEPLOY_PATH }}/*

            - name: Copy files to server
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT || 22 }}
                  source: 'website.tar.gz'
                  target: '/tmp/'

            - name: Extract and finalize deployment
              uses: appleboy/ssh-action@v1.0.3
              env:
                  RESTART_COMMAND: ${{ secrets.RESTART_COMMAND }}
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT || 22 }}
                  envs: RESTART_COMMAND
                  script: |
                      # Extract files to deployment directory
                      cd ${{ secrets.DEPLOY_PATH }}
                      tar -xzf /tmp/website.tar.gz

                      # Set proper permissions
                      chown -R ${{ secrets.WEB_USER || 'www-data' }}:${{ secrets.WEB_GROUP || 'www-data' }} ${{ secrets.DEPLOY_PATH }}
                      find ${{ secrets.DEPLOY_PATH }} -type f -exec chmod 644 {} \;
                      find ${{ secrets.DEPLOY_PATH }} -type d -exec chmod 755 {} \;

                      # Clean up temporary files
                      rm -f /tmp/website.tar.gz

                      # Restart web server if specified
                      if [ -n "$RESTART_COMMAND" ]; then
                        eval "$RESTART_COMMAND"
                      fi

                      echo "Deployment completed successfully!"

            - name: Health check
              run: |
                  HEALTH_CHECK_URL="${{ secrets.HEALTH_CHECK_URL }}"

                  # Skip health check if URL is not provided
                  if [ -z "$HEALTH_CHECK_URL" ]; then
                    echo "‚è≠Ô∏è Health check skipped - HEALTH_CHECK_URL not configured"
                    exit 0
                  fi

                  echo "üîç Performing health check on: $HEALTH_CHECK_URL"

                  # Wait a moment for the server to restart
                  sleep 10

                  # Check if the website is accessible with retry logic
                  max_attempts=3
                  attempt=1

                  while [ $attempt -le $max_attempts ]; do
                    echo "üîÑ Health check attempt $attempt/$max_attempts"

                    # Use curl with a custom user agent to avoid bot protection issues
                    if response=$(curl -A "Mozilla/5.0" -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 30 "$HEALTH_CHECK_URL" 2>/dev/null); then
                      if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ]; then
                        echo "‚úÖ Health check passed! Website is accessible (HTTP $response)."
                        exit 0
                      else
                        echo "‚ö†Ô∏è Health check returned HTTP $response"
                      fi
                    else
                      echo "‚ùå Health check failed - curl command failed"
                    fi

                    if [ $attempt -lt $max_attempts ]; then
                      echo "‚è≥ Waiting 15 seconds before retry..."
                      sleep 15
                    fi

                    attempt=$((attempt + 1))
                  done

                  echo "‚ùå Health check failed after $max_attempts attempts"
                  exit 1

            - name: Clean up old backups
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT || 22 }}
                  script: |
                      # Remove backups older than the last 3
                      BACKUP_DIR=$(dirname ${{ secrets.DEPLOY_PATH }})
                      cd "$BACKUP_DIR"
                      ls -t | grep "$(basename ${{ secrets.DEPLOY_PATH }})_backup_" | tail -n +4 | xargs rm -rf || true
                      echo "‚úÖ Old backups cleaned up, last 3 retained."

            - name: Notify deployment status
              if: always()
              run: |
                  HEALTH_CHECK_URL="${{ secrets.HEALTH_CHECK_URL }}"

                  if [ "${{ job.status }}" == "success" ]; then
                    echo "üöÄ Deployment successful!"
                    if [ -n "$HEALTH_CHECK_URL" ]; then
                      echo "Website URL: $HEALTH_CHECK_URL"
                    else
                      echo "Website deployed to server successfully!"
                    fi
                  else
                    echo "üí• Deployment failed!"
                  fi
